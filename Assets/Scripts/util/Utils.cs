//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

public class Utils {
	public static int CountBools(params bool[] args) {
		int c = 0;
		foreach (bool a in args) {
			if (a)
				c++;
		}
		return c;
	}

	public static void DoNothing() {

	}

	public static string ReadText(string source) {
		TextAsset text = Resources.Load(source) as TextAsset;
		return text.text;
	}

	public static Rect CenteredRect(float width, float height) {
		Rect n = new Rect(0, 0, width, height);
		n.center = new Vector2(Screen.width / 2, Screen.height /2);
		return n;
	}

	public static Rect BoundsToScreenRect(Bounds bounds) {
		// Get mesh origin and farthest extent (this works best with simple convex meshes)
		Vector3 origin = Camera.main.WorldToScreenPoint(new Vector3(bounds.min.x, bounds.max.y, 0f));
		Vector3 extent = Camera.main.WorldToScreenPoint(new Vector3(bounds.max.x, bounds.min.y, 0f));
		
		// Create rect in screen space and return - does not account for camera perspective
		return new Rect(origin.x, Screen.height - origin.y, extent.x - origin.x, origin.y - extent.y);
	}

	//Finds the maximum font size in a given width + height combination
	public static int TextMaximumSize(string content, int width, int height, GUIStyle stajl) {
		int minsize = 9;
		int maxsize = 92;

		int size = maxsize;
		int change = 100;

		GUIStyle style = new GUIStyle(stajl);
		style.fontSize = size;

		GUIContent con = new GUIContent(content);
		//int counter = 0;

		while (true) {
			Vector2 sizes = style.CalcSize(con);
			change = size;

			if (sizes.x >= width || sizes.y >= height) {
				maxsize = size;
				//Debug.Log("Too big; new max = " + maxsize);
				size = (maxsize - minsize)/2 + minsize;
			} else {
				minsize = size;
				//Debug.Log("Small; new min = " + minsize);
				size = (maxsize - minsize)/2 + minsize;
			}

			change = change - size;
			if (Mathf.Abs(change) < 2) {
				break;
			}

			style.fontSize = size;
			//++counter;
		}
		//Debug.Log("took " + counter + " iterations");

		return size;
	}
}

